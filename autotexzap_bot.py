import telebot
import os
import json
from telebot import types

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

LINKS_FILE = 'chat_links.json'
MANAGER_FILE = 'manager_ids.json'
ACTIVE_DIALOGS = 'active_dialogs.json'

def load_json(path):
    return json.load(open(path, encoding='utf-8')) if os.path.exists(path) else {}

def save_json(data, path):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def manager_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üßç –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "/help")
    return kb

def client_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", "üí¨ –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    return kb

@bot.message_handler(commands=["help"])
def help_command(message):
    is_manager = str(message.chat.id) in load_json(MANAGER_FILE).values()
    if is_manager:
        text = """üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>
/clients ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
/register_login –ª–æ–≥–∏–Ω ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=manager_keyboard())
    else:
        text = """üìñ <b>–ö–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞:</b>
/start ‚Äî –Ω–∞—á–∞—Ç—å
/help ‚Äî –ø–æ–º–æ—â—å
üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=client_keyboard())

@bot.message_handler(commands=["start"])
def start_command(message):
    is_manager = str(message.chat.id) in load_json(MANAGER_FILE).values()
    if is_manager:
        bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=manager_keyboard())
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@bot.message_handler(commands=["register_login"])
def register_login(message):
    try:
        login = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: /register_login ivanov")
        return
    managers = load_json(MANAGER_FILE)
    managers[login] = message.chat.id
    save_json(managers, MANAGER_FILE)
    bot.send_message(message.chat.id, f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=manager_keyboard())

@bot.message_handler(commands=["clients"])
def list_clients(message):
    links = load_json(LINKS_FILE)
    manager_id = str(message.chat.id)
    clients = [uid for uid, mid in links.items() if mid == int(manager_id) and uid != manager_id]
    if not clients:
        bot.send_message(manager_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.", reply_markup=manager_keyboard())
        return
    markup = types.InlineKeyboardMarkup()
    for cid in clients:
        markup.add(types.InlineKeyboardButton(f"–ö–ª–∏–µ–Ω—Ç {cid}", callback_data=f"dialog:{cid}"))
    bot.send_message(manager_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:", reply_markup=markup)

@bot.message_handler(commands=["stop"])
def stop_dialog(message):
    mid = str(message.chat.id)
    dialogs = load_json(ACTIVE_DIALOGS)
    links = load_json(LINKS_FILE)

    if mid in dialogs:
        del dialogs[mid]
        save_json(dialogs, ACTIVE_DIALOGS)
        bot.send_message(message.chat.id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=manager_keyboard())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        waiting_clients = [uid for uid, mgr in links.items() if mgr == int(mid) and uid != mid]
        if waiting_clients:
            bot.send_message(mid, f"üïí –û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç {waiting_clients[0]}.
        bot.send_message(mid, f"üïí –û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç {waiting_clients[0]}. –ù–∞–ø–∏—à–∏—Ç–µ /clients —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.", reply_markup=manager_keyboard())
–ù–∞–ø–∏—à–∏—Ç–µ /clients —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.""", reply_markup=manager_keyboard())
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=manager_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("dialog:"))
def open_dialog(call):
    client_id = call.data.split(":")[1]
    mid = str(call.message.chat.id)
    dialogs = load_json(ACTIVE_DIALOGS)
    dialogs[mid] = client_id
    save_json(dialogs, ACTIVE_DIALOGS)
    bot.send_message(mid, f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id} –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=manager_keyboard())

@bot.message_handler(func=lambda m: True)
def handle_messages(message):
    user_id = str(message.chat.id)
    dialogs = load_json(ACTIVE_DIALOGS)
    links = load_json(LINKS_FILE)

    if user_id in dialogs:
        peer_id = dialogs[user_id]
        bot.send_message(peer_id, f"üí¨ {message.text}")
        return
    elif user_id in links:
        peer_id = links[user_id]
        bot.send_message(peer_id, f"üí¨ {message.text}")
        return

    bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=client_keyboard())

bot.polling()
