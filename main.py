# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    raw_phone = contact.phone_number
    phone = normalize_phone(raw_phone)
    telegram_id = contact.user_id

    # DEBUG LOGGING
    print("== üì≤ –ó–∞–ø—Ä–æ—Å –Ω–∞ API –ø–æ –Ω–æ–º–µ—Ä—É ==")
    print("–ù–æ–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ API:", phone)

    response = requests.get(f"{BASE_URL}/customers/?token={API_TOKEN}&phone={phone}").json()

    print("–û—Ç–≤–µ—Ç –æ—Ç API:", response)

    if not response.get("result"):
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    customer = response["result"][0]
    customer_id = customer["customerID"]
    manager_login = customer.get("managerLogin")

    cursor.execute(
        "INSERT OR REPLACE INTO users (telegram_id, phone, customer_id, last_status) VALUES (?, ?, ?, ?)",
        (telegram_id, phone, customer_id, "")
    )
    conn.commit()

    await update.message.reply_text(
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º.",
        reply_markup=ReplyKeyboardRemove()
    )

    if manager_login:
        cursor.execute("SELECT telegram_id FROM managers WHERE login = ?", (manager_login,))
        row = cursor.fetchone()
        if row:
            manager_id = row[0]
            await context.bot.send_message(
                chat_id=manager_id,
                text=f"üë§ –í–∞—à –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ:
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )