import logging
import requests
import sqlite3
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
)

API_TOKEN = "d579a8bdade5445c3683a0bb9526b657de79de53"  # —Ç–æ–∫–µ–Ω API —Å–∞–π—Ç–∞
BOT_TOKEN = "PASTE_YOUR_BOT_TOKEN_HERE"
BASE_URL = "https://www.autotechnik.store/api/v1"
CHECK_INTERVAL = 600  # 10 –º–∏–Ω—É—Ç

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        phone TEXT,
        customer_id INTEGER,
        last_status TEXT
    )
""")
conn.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone = contact.phone_number
    telegram_id = contact.user_id

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–∞–π—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    response = requests.get(
        f"{BASE_URL}/customers/?token={API_TOKEN}&phone={phone}"
    ).json()

    if not response.get("result"):
        await update.message.reply_text("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    customer_id = response["result"][0]["customerID"]

    cursor.execute(
        "INSERT OR REPLACE INTO users (telegram_id, phone, customer_id, last_status) VALUES (?, ?, ?, ?)",
        (telegram_id, phone, customer_id, "")
    )
    conn.commit()

    await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º.", reply_markup=ReplyKeyboardRemove())

async def check_orders(application):
    while True:
        cursor.execute("SELECT telegram_id, customer_id, last_status FROM users")
        for telegram_id, customer_id, last_status in cursor.fetchall():
            try:
                response = requests.get(
                    f"{BASE_URL}/customers/{customer_id}/orders/?token={API_TOKEN}"
                ).json()
                if "result" not in response:
                    continue
                for order in response["result"]:
                    status = order.get("statusName", "")
                    if status not in [
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 3 –¥–µ–Ω—å",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 4 –¥–µ–Ω—å",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 5 –¥–µ–Ω—å",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 6 –¥–µ–Ω—å",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 7 –¥–µ–Ω—å",
                        "–í—ã–¥–∞–Ω–æ",
                    ] or status == last_status:
                        continue

                    text = get_status_message(status)
                    application.bot.send_message(chat_id=telegram_id, text=text)

                    cursor.execute(
                        "UPDATE users SET last_status=? WHERE telegram_id=?",
                        (status, telegram_id),
                    )
                    conn.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await application.job_queue.run_once(lambda _: None, CHECK_INTERVAL)

def get_status_message(status):
    match status:
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
            return "üßæ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ. –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî 7 –¥–Ω–µ–π."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 3 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (3-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 4 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (4-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 5 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (5-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 6 –¥–µ–Ω—å":
            return "‚ö†Ô∏è –°—Ä–æ—á–Ω–æ: –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω!"
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 7 –¥–µ–Ω—å":
            return "‚ùå –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ 20:00 –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω."
        case "–í—ã–¥–∞–Ω–æ":
            return "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω. –î–æ—Å—Ç—É–ø–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π."
        case _:
            return ""

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))

    app.job_queue.run_repeating(lambda ctx: check_orders(app), interval=CHECK_INTERVAL)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()