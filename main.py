import logging
import os
import sqlite3
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_TOKEN = os.getenv("API_TOKEN")
BASE_URL = "https://www.autotechnik.store/api/v1"
CHECK_INTERVAL = 600

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    phone TEXT,
    customer_id INTEGER,
    last_status TEXT
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS managers (
    login TEXT PRIMARY KEY,
    telegram_id INTEGER
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders_sent (
    order_id TEXT PRIMARY KEY
);
""")
conn.commit()

def normalize_phone(phone: str) -> str:
    digits = ''.join(filter(str.isdigit, phone))
    if digits.startswith("8"):
        digits = "7" + digits[1:]
    elif digits.startswith("9"):
        digits = "7" + digits
    return f"+{digits}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    raw_phone = contact.phone_number
    phone = normalize_phone(raw_phone)
    telegram_id = contact.user_id

    print("== üì≤ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", phone)

    response = requests.get(f"{BASE_URL}/customers/?token={API_TOKEN}").json()

    if not response.get("result"):
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    matched_customer = None
    for customer in response["result"]:
        customer_phone = customer.get("phone")
        if not customer_phone:
            continue
        normalized = normalize_phone(customer_phone)
        if normalized == phone:
            matched_customer = customer
            break

    if not matched_customer:
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ –Ω–æ–º–µ—Ä—É).")
        return

    customer_id = matched_customer["customerID"]
    manager_login = matched_customer.get("managerLogin")

    cursor.execute(
        "INSERT OR REPLACE INTO users (telegram_id, phone, customer_id, last_status) VALUES (?, ?, ?, ?)",
        (telegram_id, phone, customer_id, "")
    )
    conn.commit()

    await update.message.reply_text(
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º.",
        reply_markup=ReplyKeyboardRemove()
    )

    if manager_login:
        cursor.execute("SELECT telegram_id FROM managers WHERE login = ?", (manager_login,))
        row = cursor.fetchone()
        if row:
            manager_id = row[0]
            await context.bot.send_message(
                chat_id=manager_id,
                text=f"üë§ –í–∞—à –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ:\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )

async def register_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register_login –≤–∞—à_–ª–æ–≥–∏–Ω")
        return
    login = context.args[0]
    telegram_id = update.message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO managers (login, telegram_id) VALUES (?, ?)", (login, telegram_id))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register_login", register_login))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.run_polling()