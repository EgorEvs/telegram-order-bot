import logging
import os
import sqlite3
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_TOKEN = os.getenv("API_TOKEN")
BASE_URL = "https://www.autotechnik.store/api/v1"
CHECK_INTERVAL = 600

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    phone TEXT,
    customer_id INTEGER,
    last_status TEXT
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS managers (
    login TEXT PRIMARY KEY,
    telegram_id INTEGER
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders_sent (
    order_id TEXT PRIMARY KEY
);
""")
conn.commit()

def normalize_phone(phone: str) -> str:
    digits = ''.join(filter(str.isdigit, phone))
    if digits.startswith("8"):
        digits = "7" + digits[1:]
    elif digits.startswith("9"):
        digits = "7" + digits
    return f"+{digits}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    raw_phone = contact.phone_number
    phone = normalize_phone(raw_phone)
    telegram_id = contact.user_id

    print("== üì≤ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API ==")
    print("–¢–µ–ª–µ—Ñ–æ–Ω:", phone)

    response = requests.get(f"{BASE_URL}/customers/?token={API_TOKEN}&phone={phone}").json()

    print("–û—Ç–≤–µ—Ç –æ—Ç API:", response)

    if not response.get("result"):
        await update.message.reply_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    customer = response["result"][0]
    customer_id = customer["customerID"]
    manager_login = customer.get("managerLogin")

    cursor.execute(
        "INSERT OR REPLACE INTO users (telegram_id, phone, customer_id, last_status) VALUES (?, ?, ?, ?)",
        (telegram_id, phone, customer_id, "")
    )
    conn.commit()

    await update.message.reply_text(
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º.",
        reply_markup=ReplyKeyboardRemove()
    )

    if manager_login:
        cursor.execute("SELECT telegram_id FROM managers WHERE login = ?", (manager_login,))
        row = cursor.fetchone()
        if row:
            manager_id = row[0]
            await context.bot.send_message(
                chat_id=manager_id,
                text=f"üë§ –í–∞—à –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ:\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )

async def register_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register_login –≤–∞—à_–ª–æ–≥–∏–Ω")
        return
    login = context.args[0]
    telegram_id = update.message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO managers (login, telegram_id) VALUES (?, ?)", (login, telegram_id))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!")

def get_status_message(status):
    match status:
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
            return "üßæ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ. –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî 7 –¥–Ω–µ–π."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 3 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (3-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 4 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (4-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 5 –¥–µ–Ω—å":
            return "üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –≤–∞—Å (5-–π –¥–µ–Ω—å)."
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 6 –¥–µ–Ω—å":
            return "‚ö†Ô∏è –°—Ä–æ—á–Ω–æ: –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω!"
        case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 7 –¥–µ–Ω—å":
            return "‚ùå –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ 20:00 –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω."
        case "–í—ã–¥–∞–Ω–æ":
            return "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω. –î–æ—Å—Ç—É–ø–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π."
        case "–û—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞":
            return "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞."
        case "–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞":
            return "üö´ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ—Ç–∫–∞–∑–∞–ª –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
        case _:
            return ""

def order_already_sent(order_id):
    cursor.execute("SELECT 1 FROM orders_sent WHERE order_id = ?", (order_id,))
    return cursor.fetchone() is not None

async def check_orders(app):
    while True:
        cursor.execute("SELECT telegram_id, customer_id, last_status FROM users")
        for telegram_id, customer_id, last_status in cursor.fetchall():
            try:
                response = requests.get(f"{BASE_URL}/customers/{customer_id}/orders/?token={API_TOKEN}").json()
                if "result" not in response:
                    continue
                for order in response["result"]:
                    order_id = order.get("orderID")
                    status = order.get("statusName", "")
                    if not order_id or status == last_status:
                        continue
                    if status in [
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 3 –¥–µ–Ω—å", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 4 –¥–µ–Ω—å",
                        "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 5 –¥–µ–Ω—å", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 6 –¥–µ–Ω—å", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ 7 –¥–µ–Ω—å",
                        "–í—ã–¥–∞–Ω–æ", "–û—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞", "–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                    ]:
                        text = get_status_message(status)
                        app.bot.send_message(chat_id=telegram_id, text=text)
                        cursor.execute("UPDATE users SET last_status=? WHERE telegram_id=?", (status, telegram_id))
                        conn.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await app.job_queue.run_once(lambda _: None, CHECK_INTERVAL)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register_login", register_login))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.job_queue.run_repeating(lambda ctx: check_orders(app), interval=CHECK_INTERVAL)
    app.run_polling()